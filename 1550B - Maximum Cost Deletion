#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace __gnu_pbds;
using namespace std;
#define ll long long
typedef tree<
pair<ll , ll>,
null_type,
less<pair<ll,ll> >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int N = 3e5 + 4 ,  MOD = 1e9 + 7;
/*bool isSorted(ll arr[], ll size) {
    for (ll i = 1; i < size; ++i) {
        if (arr[i - 1] > arr[i]) {
            return false;
        }
    }
    return true;
}
ll gcd(ll a,ll b)
{
    if(b==0)
    {
        return a;
    }
    gcd(b,(a%b));
}
bool is_valid(string expression)
{
    stack<char>s;
    int len=expression.length();
    for(int i=0;i<len;i++)
    {
        if(expression[i]=='('||expression[i]=='{'||expression[i]=='[')
        {
            s.push(expression[i]);
        }
        else if(s.empty() || (expression[i] == ')' && s.top() != '(') || (expression[i] == '}' && s.top() != '{') || (expression[i] == ']' && s.top() != '['))
        {
            return false;
        }
        else
        {
            s.pop();
        }
    }

    return s.empty();
}*/
int main() {
   ll t;
   cin>>t;
   while(t--)
   {
       int n,a,b;
       cin>>n>>a>>b;
       string  s;
       cin>>s;
       vector<int>vec(n);
       //to calc number of blocks
       int lenn=1;
       int cnt=0;
       for (int i = 1; i < n; ++i)
       {
           if (s[i] != s[i - 1])
           {
               lenn++;
           }

       }

       // to calc how many times we will cut the 2nd block and merge the rest
       while(lenn>=3)
       {
           lenn-=2;
           cnt++;
       }
       //if no more enough blocks to cut the second we merge 1st and last into one and add that block to lenn this is how many times till s is empty
       cnt+=lenn;
       if (b>=0)
       {
           cout<<a*n+n*b<<"\n";
       }
       else
       {
           cout<<a*n+cnt*b<<"\n";
       }
   }

    return 0;
}
